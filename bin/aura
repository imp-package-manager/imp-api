#! /usr/bin/ruby

require 'net/http'
require 'open-uri'
require 'fileutils'
require_relative '../lib/aura'

Signal.trap('INT') { puts; exit 1 }

unless ARGV.size == 1
  $stderr.puts "package?"
  exit 1
end

env = Environment.new
env.test  = "test"
env.temp  = "temp"
env.redo  =  false
env.todo  =  ARGV[0]

if env.redo or !env.cd?

  FileUtils.rm_rf env.test+env.todo rescue false

  package = "https://aur.archlinux.org/#{env.todo}.git"
  command = String.new

  command << "git clone --quiet "
  command << package + " "
  command << env.test + env.todo

  Console << [:aur, package]

  pipe = Pipe.new
  pipe.command = command
  pipe.go!

  unless env.cd?
    $stderr.puts "package?!"
    exit 1
  end

end

pkgbuild = Pkgbuild.new

unless pkgbuild.ok?
  $stderr.puts "pkgbuild?"
  exit 1
end

srcdir = File.expand_path(pkgbuild["pkgname"], env.temp)
pkgdir = "/home/patz/aura/pkgs"

if env.redo
  FileUtils.rm_rf(srcdir)
end

unless File.exists? srcdir

  Dir.mkdir(srcdir)

  pkgbuild["source"].each do |path|
    Source.new(path, srcdir) rescue
    begin
      $stderr.puts "source?!"
    end
  end

end

pkgbuild << {"srcdir" => srcdir}
pkgbuild << {"pkgdir" => pkgdir}

["prepare", "build", "package"].each do |func|

  body = pkgbuild[func + "()"]
  next if body.nil?

  pipe = Pipe.new
  pipe.command = body
  pipe.go!

end
