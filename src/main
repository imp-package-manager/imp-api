#! /usr/bin/env ruby

# imp main script

# git root dir shortcut
$git = File.expand_path __dir__ + "/../"

# require external libs

require 'fileutils'
require 'digest'
require 'open3'
require 'open-uri'
require 'net/http'
require 'io/console'

# require optional libs

begin
  require 'curses'
rescue LoadError
  Curses = nil
end

# require internal libs
Dir["#$git/src/lib/*"].each do |file|
  require_relative file 
end

# CTRL+C interrupt
Signal.trap('INT') { puts; App.quit }

# early option processing
Debug.on! if ARGV.include? "--debug" 
ARGV << "--tui" if ARGV.none?

# default environment
require_relative 'defaults'

# current environment
Env << Config
Cli.err if Err.ed?
Env << Options
Cli.err if Err.ed?

# upgrade imp!

if Env["upgrade"]

  require_relative 'imp-upgrade'
  
  App.tab "intro"
  App.init Env["tui"]
  Plugin.init

  Plugin.each.each_with_index do |plug, i|
    App.intro [i + 1, Plugin.size]
    plug.upgrade
  end

  App.intro

elsif Cache["intro"].nil?

  App.tab "intro"
  App.init Env["tui"]
  Plugin.init
  App.intro

else

  App.tab "search"
  App.init Env["tui"]
  Plugin.init

end


# check filesystem
require_relative 'filesystem'
Cli.err if Err.ed?


if Env["help"]           # print help

  puts Env.help
  exit

elsif Env["env"]         # print environment

  puts Env
  exit

elsif [
  Env["plugin"],
  Env["list"],
  Env["search"],
  Env["info"],
  Env["remove"],
].count(true) > 1        # too many actions

  puts Env.help
  exit

elsif Env["plugin"]      # list plugins

  Plugin.init
  Plugin.each do |p|
    Cli[-1] = Cli.tab(p.name, 8) + " =>   " + Cli.tab(p.desc, 0)
  end
  exit

elsif Env["list"]        # list local packages

  Plugin.init
  Local.init
  Local.list.each do |pkg|
    Cli[-1] = "#{pkg.name}-#{pkg.version}"
  end
  exit

end

Local.init

case true
when App.tui?            # wait for user input

  #sleep 5
  #App.tab "install"
  #Plugin["aur"].install "kewl"
  sleep 1 while true

when Env["todo"].empty?  # no target specified

  App.quit if Env["upgrade"]
  Cli[-1] = Env.help

when Env["search"]       # search

  th = Plugin.search( Env["todo"] ) do |res|
    res.each do |pkg|
      Cli[-1] = "#{pkg.name}-#{pkg.version}"
    end
  end

  while sleep 0.33
    App.quit if th.none? { |t| t.status }
  end

when Env["info"]

when Env["remove"]

  # find appropriate plugin

  ar = Hash.new

  Plugin.each do |plug|
    ar = {plug.name => nil}.merge ar
  end

  Local.list.each do |pkg|
    if pkg.name == Env["todo"]
      ar[pkg.plugin] = true
    end
  end

  plugin = ar.find{ |k, v| v == true }.to_a[0]

  # use the plugin

  if plugin.nil?
    Cli[-1] = "package not installed"
    App.quit 1
  end

  p plugin
  Plugin[plugin].remove Env["todo"]

else                      # install

  # find appropriate plugin

  ar = Hash.new

  Plugin.each do |plug|
    ar.merge! plug.name => nil
    plug.exists Env["todo"] do |res|
      ar[plug.name] = res
    end
  end

  plugin = nil

  while sleep 0.33

    plugin = false

    ar.each do |key, val|
      case val
      when nil
        plugin = nil
        break
      when false
        next
      when true
        plugin = key
        break
      end
    end

    case plugin
    when nil
    when false
      Cli[-1] = "package not found"
      App.quit 1
    else
      break
    end

  end

  # use the plugin

  p plugin
  Plugin[plugin].install Env["todo"]

end

