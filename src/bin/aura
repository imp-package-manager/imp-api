#! /usr/bin/ruby

require 'optparse'
require 'open3'
require 'net/http'
require 'open-uri'
require 'fileutils'

$base = __dir__ + "/../.."

$env
require_relative '../lib/aura'

Signal.trap('INT') { puts; exit 1 }

$env.conf   = "#$base/config.txt"
$env.conf!  rescue Console.err("unparseable config file")

$env.errs   = "#$base/errors.txt"
$env.aurs   = "#$base/auras/aurs"
$env.pkgs   = "#$base/auras/pkgs"
$env.root   = "#$base/auras/root"
$env.todo   = nil
$env.redo   = false
$env.keep   = false
$env.verb   = false
$env.init!

unless $env.tree?
  Console.err("aura tree invalid")
end

=begin
puts $env.conf
puts $env.errs
puts $env.aurs
puts $env.pkgs
puts $env.root
puts $env.todo
puts $env.redo
puts $env.init?
exit
=end

unless $env.todo
  $stderr.puts "provide one package as an argument!"
  exit 1
end

Console.log("processing")

if $env.redo or !File.directory?($env.aurs + $env.todo)

  FileUtils.rm_rf($env.aurs + $env.todo) rescue false

  package = "https://aur.archlinux.org/#{$env.todo}.git"
  Console.log("requesting", package)

  gitfile = $env.aurs + $env.todo
  command = String.new

  command << "git clone --quiet "
  command << package << " "
  command << gitfile

  pipe = Pipe.go! command

  if pipe.err.start_with? "warning"
    FileUtils.rm_rf gitfile
    Console.err("couldn't find AUR package")
  end

end

Dir.chdir($env.aurs + $env.todo)

Console.log("requesting", "PKGBUILD")
pkgbuild = Pkgbuild.new

unless pkgbuild.ok?
  Console.err("unparseable PKGBUILD")
end

srcdir = File.expand_path(pkgbuild["pkgname"], $env.pkgs)
pkgbuild << {"srcdir" => srcdir}
pkgbuild << {"pkgdir" => $env.root}

Console.end

depends = pkgbuild["depends", false]
depends.map! do |pkg|
  Depend.new(pkg)
end

Depend.init
depends.each do |dep|
  unless dep.present?
    Console.err("package not found")
  end
end

Console.end

if $env.redo
  FileUtils.rm_rf(srcdir)
end

if File.exists? srcdir
  sources = []
else
  Dir.mkdir(srcdir)
  sources = pkgbuild["source", false]
  sources = sources.to_a
  sources.map! do |path|
    Source.new(path, srcdir)
  end
end

sources.each do |src|
  src.retrieve rescue
  begin
    Console.err("failed to open stream")
  end
end

Console.end

sources.each do |src|
  src.extract
end

Console.end

Dir.chdir srcdir

["prepare", "build", "package"].each do |func|

  Console.log("installing", func)

  body = pkgbuild[func + "()"]
  pipe = Pipe.go! body

  unless pipe.ok?
    Console << pipe.err
    Console.err("compatibility?")
  end

end

Console.oki
